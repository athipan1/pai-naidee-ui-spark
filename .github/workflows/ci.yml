name: Continuous Integration

on:
  push:
    branches: [ main, production-ready/*, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:run

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate security audit report (temporary fix)
        run: |
          echo "Generating npm audit report for analysis..."
          npm audit --json > audit-report.json || true
          echo "Audit report generated. Check artifacts for details."
          
      - name: Upload npm audit report
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: audit-report.json
          retention-days: 30

  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint (non-blocking)
        run: |
          echo "Running ESLint and saving results to lint-report.txt..."
          npm run lint > lint-report.txt 2>&1 || true
          echo "ESLint completed. Results saved for analysis."
          cat lint-report.txt

      - name: Upload lint report
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: lint-report.txt
          retention-days: 30

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Run Prettier check (non-blocking)
        run: |
          echo "Running Prettier check and saving results to prettier-report.txt..."
          npm run format:check > prettier-report.txt 2>&1 || true
          echo "Prettier check completed. Results saved for analysis."
          cat prettier-report.txt

      - name: Upload prettier report
        uses: actions/upload-artifact@v4
        with:
          name: prettier-report
          path: prettier-report.txt
          retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security-audit, lint-and-type-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [build]  # Depend on build job to get artifacts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Create lightweight Dockerfile for testing
        run: |
          # Temporarily move dist folder to avoid .dockerignore exclusion
          mv dist docker-build-temp
          
          cat > Dockerfile.test << 'EOF'
          FROM nginx:stable-alpine
          COPY docker-build-temp /usr/share/nginx/html
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          
          HEALTHCHECK --interval=30s --timeout=5s \
            CMD wget -q --spider http://localhost || exit 1
          
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          EOF

      - name: Build Docker image for testing
        run: docker build -f Dockerfile.test . -t pai-naidee-ui-spark:test

      - name: Test Docker image
        run: |
          # Cleanup any existing test containers
          docker stop test-container 2>/dev/null || true
          docker rm test-container 2>/dev/null || true
          
          echo "🚀 Starting Docker container..."
          docker run --rm -d --name test-container -p 8080:80 pai-naidee-ui-spark:test
          
          echo "📋 Verifying container status..."
          if ! docker ps | grep -q test-container; then
            echo "❌ Container failed to start"
            docker logs test-container 2>&1 || echo "No logs available"
            exit 1
          fi
          
          echo "🏥 Waiting for health check with retry logic..."
          max_attempts=30
          attempt=1
          health_check_passed=false
          
          while [ $attempt -le $max_attempts ]; do
            echo "🔍 Attempt $attempt/$max_attempts - Checking container health..."
            
            # Check if container is still running
            if ! docker ps | grep -q test-container; then
              echo "❌ Container stopped running. Logs:"
              docker logs test-container 2>&1 || echo "No logs available"
              exit 1
            fi
            
            # Check Docker health status if available
            health_status=$(docker inspect --format='{{.State.Health.Status}}' test-container 2>/dev/null || echo "none")
            echo "   Health status: $health_status"
            
            # Try HTTP request with more detailed error info
            http_response=$(curl -f -s --max-time 5 -w "HTTP_CODE:%{http_code}" http://localhost:8080 2>&1 || true)
            if echo "$http_response" | grep -q "HTTP_CODE:200"; then
              echo "✅ Health check passed! Application is responding with HTTP 200."
              health_check_passed=true
              break
            fi
            
            echo "   HTTP check failed: $http_response"
            sleep 5
            attempt=$((attempt + 1))
          done
          
          if [ "$health_check_passed" = false ]; then
            echo "❌ Health check failed after $max_attempts attempts (150 seconds)"
            echo "📋 Container status:"
            docker ps -a | grep test-container || echo "Container not found"
            echo "📝 Container logs:"
            docker logs test-container 2>&1 || echo "No logs available"
            echo "🔧 System information:"
            echo "   Port 8080 status: $(netstat -tlnp 2>/dev/null | grep :8080 || echo 'No process on port 8080')"
            echo "   Docker processes:"
            docker ps -a | head -5
            docker stop test-container || echo "Container already stopped"
            exit 1
          fi
          
          echo "🧹 Cleaning up..."
          docker stop test-container