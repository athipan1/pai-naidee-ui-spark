-- Create the schema if it doesn't exist
CREATE SCHEMA IF NOT EXISTS public;

-- Grant usage on the schema to the anon role
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;

--
-- PLACES TABLE
-- Stores information about tourist attractions and locations.
--
CREATE TABLE IF NOT EXISTS public.places (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    name text NOT NULL,
    name_local text,
    province text NOT NULL,
    category text NOT NULL,
    description text,
    image_url text,
    rating numeric(2, 1) DEFAULT 0.0,
    review_count integer DEFAULT 0,
    lat numeric(9, 6),
    lng numeric(9, 6),
    tags jsonb DEFAULT '[]'::jsonb,
    amenities jsonb DEFAULT '[]'::jsonb
);

-- Grant permissions for places table
ALTER TABLE public.places OWNER TO postgres;
GRANT ALL ON TABLE public.places TO postgres;
GRANT SELECT ON TABLE public.places TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.places TO authenticated;
GRANT ALL ON TABLE public.places TO service_role;


-- RLS Policies for places
ALTER TABLE public.places ENABLE ROW LEVEL SECURITY;

-- Allow public, anonymous read access to all places
CREATE POLICY "Allow public read access"
ON public.places FOR SELECT
TO anon
USING (true);

-- Allow authenticated users to insert new places
CREATE POLICY "Allow authenticated users to insert"
ON public.places FOR INSERT
TO authenticated
WITH CHECK (true);

-- Allow users to update places they have created (or make it admin-only)
-- For now, let's restrict updates to service_role, can be changed later.
CREATE POLICY "Allow admin to update"
ON public.places FOR UPDATE
TO service_role
USING (true);

-- Allow users to delete places they have created (or make it admin-only)
-- For now, let's restrict deletes to service_role, can be changed later.
CREATE POLICY "Allow admin to delete"
ON public.places FOR DELETE
TO service_role
USING (true);

--
-- USERS TABLE
-- Stores public user profile information, extending the auth.users table.
--
CREATE TABLE IF NOT EXISTS public.users (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    updated_at timestamp with time zone,
    username text UNIQUE,
    full_name text,
    avatar_url text,
    CONSTRAINT username_length CHECK (char_length(username) >= 3)
);

-- Grant permissions for users table
ALTER TABLE public.users OWNER TO postgres;
GRANT ALL ON TABLE public.users TO postgres;
GRANT SELECT ON TABLE public.users TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.users TO authenticated;
GRANT ALL ON TABLE public.users TO service_role;

-- RLS Policies for users
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- Allow users to view all public profiles
CREATE POLICY "Allow users to view all profiles"
ON public.users FOR SELECT
TO authenticated
USING (true);

-- Allow users to insert their own profile
CREATE POLICY "Allow users to insert their own profile"
ON public.users FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = id);

-- Allow users to update their own profile
CREATE POLICY "Allow users to update their own profile"
ON public.users FOR UPDATE
TO authenticated
USING (auth.uid() = id);

--
-- FAVORITES TABLE
-- Stores user's favorite places.
--
CREATE TABLE IF NOT EXISTS public.favorites (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    place_id uuid NOT NULL REFERENCES public.places(id) ON DELETE CASCADE,
    UNIQUE (user_id, place_id)
);

-- Grant permissions for favorites table
ALTER TABLE public.favorites OWNER TO postgres;
GRANT ALL ON TABLE public.favorites TO postgres;
GRANT SELECT, INSERT, DELETE ON TABLE public.favorites TO authenticated;
GRANT ALL ON TABLE public.favorites TO service_role;

-- RLS Policies for favorites
ALTER TABLE public.favorites ENABLE ROW LEVEL SECURITY;

-- Allow users to view their own favorites
CREATE POLICY "Allow users to view their own favorites"
ON public.favorites FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

-- Allow users to insert their own favorites
CREATE POLICY "Allow users to insert their own favorites"
ON public.favorites FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

-- Allow users to delete their own favorites
CREATE POLICY "Allow users to delete their own favorites"
ON public.favorites FOR DELETE
TO authenticated
USING (auth.uid() = user_id);

--
-- BOOKINGS TABLE
-- Stores booking information for places.
--
CREATE TABLE IF NOT EXISTS public.bookings (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    place_id uuid NOT NULL REFERENCES public.places(id) ON DELETE CASCADE,
    start_date date NOT NULL,
    end_date date NOT NULL,
    status text DEFAULT 'confirmed'::text, -- e.g., 'confirmed', 'cancelled'
    notes text,
    CONSTRAINT dates_check CHECK (end_date >= start_date)
);

-- Grant permissions for bookings table
ALTER TABLE public.bookings OWNER TO postgres;
GRANT ALL ON TABLE public.bookings TO postgres;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.bookings TO authenticated;
GRANT ALL ON TABLE public.bookings TO service_role;

-- RLS Policies for bookings
ALTER TABLE public.bookings ENABLE ROW LEVEL SECURITY;

-- Allow users to view their own bookings
CREATE POLICY "Allow users to view their own bookings"
ON public.bookings FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

-- Allow users to insert their own bookings
CREATE POLICY "Allow users to insert their own bookings"
ON public.bookings FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

-- Allow users to update their own bookings
CREATE POLICY "Allow users to update their own bookings"
ON public.bookings FOR UPDATE
TO authenticated
USING (auth.uid() = user_id);

-- Allow users to delete their own bookings
CREATE POLICY "Allow users to delete their own bookings"
ON public.bookings FOR DELETE
TO authenticated
USING (auth.uid() = user_id);

-- Function to automatically update `updated_at` timestamp
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update `updated_at` on places table modification
CREATE TRIGGER on_places_updated
  BEFORE UPDATE ON public.places
  FOR EACH ROW
  EXECUTE PROCEDURE public.handle_updated_at();

-- Trigger to update `updated_at` on users table modification
CREATE TRIGGER on_users_updated
  BEFORE UPDATE ON public.users
  FOR EACH ROW
  EXECUTE PROCEDURE public.handle_updated_at();